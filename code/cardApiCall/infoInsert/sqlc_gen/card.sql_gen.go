// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: card.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM cards
WHERE id = $1
`

func (q *Queries) DeleteCard(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCard, id)
	return err
}

const getCard = `-- name: GetCard :one
SELECT id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version FROM cards
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertCard = `-- name: InsertCard :one
INSERT INTO cards (
  name_ja,
  name_en,
  card_text_ja,
  card_text_en,
  neuron_id,
  ocg_api_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
`

type InsertCardParams struct {
	NameJa     sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn     sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn sql.NullString `db:"card_text_en" json:"cardTextEn"`
	NeuronID   sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID   sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
}

func (q *Queries) InsertCard(ctx context.Context, arg InsertCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, insertCard,
		arg.NameJa,
		arg.NameEn,
		arg.CardTextJa,
		arg.CardTextEn,
		arg.NeuronID,
		arg.OcgApiID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version FROM cards
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCardsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListCards(ctx context.Context, arg ListCardsParams) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, listCards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.NeuronID,
			&i.OcgApiID,
			&i.NameJa,
			&i.NameEn,
			&i.CardTextJa,
			&i.CardTextEn,
			&i.Dataowner,
			&i.RegistDate,
			&i.EnableStartDate,
			&i.EnableEndDate,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectByCardId = `-- name: SelectByCardId :one
SELECT id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version FROM cards
WHERE id = $1
`

func (q *Queries) SelectByCardId(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRowContext(ctx, selectByCardId, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const selectByCardNameEn = `-- name: SelectByCardNameEn :one
SELECT id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version FROM cards
WHERE name_en = $1
`

func (q *Queries) SelectByCardNameEn(ctx context.Context, nameEn sql.NullString) (Card, error) {
	row := q.db.QueryRowContext(ctx, selectByCardNameEn, nameEn)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const selectByCardNameJa = `-- name: SelectByCardNameJa :one
SELECT id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version FROM cards
WHERE name_ja = $1
`

func (q *Queries) SelectByCardNameJa(ctx context.Context, nameJa sql.NullString) (Card, error) {
	row := q.db.QueryRowContext(ctx, selectByCardNameJa, nameJa)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const updateCard = `-- name: UpdateCard :one
UPDATE cards
SET
  name_ja = $2,
  name_en = $3,
  card_text_ja = $4,
  card_text_en = $5,
  neuron_id = $6,
  ocg_api_id = $7
WHERE id = $1
RETURNING id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
`

type UpdateCardParams struct {
	ID         int64          `db:"id" json:"id"`
	NameJa     sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn     sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn sql.NullString `db:"card_text_en" json:"cardTextEn"`
	NeuronID   sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID   sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, updateCard,
		arg.ID,
		arg.NameJa,
		arg.NameEn,
		arg.CardTextJa,
		arg.CardTextEn,
		arg.NeuronID,
		arg.OcgApiID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}
