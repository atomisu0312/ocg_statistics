// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: monster.sql

package sqlc_gen

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const findMonsterByCardID = `-- name: FindMonsterByCardID :one
SELECT card_id, race_id, attribute_id, attack, defense, level, type_ids
FROM monsters
WHERE card_id = $1
`

type FindMonsterByCardIDRow struct {
	CardID      int64         `db:"card_id" json:"cardId"`
	RaceID      sql.NullInt32 `db:"race_id" json:"raceId"`
	AttributeID sql.NullInt32 `db:"attribute_id" json:"attributeId"`
	Attack      sql.NullInt32 `db:"attack" json:"attack"`
	Defense     sql.NullInt32 `db:"defense" json:"defense"`
	Level       sql.NullInt32 `db:"level" json:"level"`
	TypeIds     []int32       `db:"type_ids" json:"typeIds"`
}

// FindMonsterByCardID ...
func (q *Queries) FindMonsterByCardID(ctx context.Context, cardID int64) (FindMonsterByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, findMonsterByCardID, cardID)
	var i FindMonsterByCardIDRow
	err := row.Scan(
		&i.CardID,
		&i.RaceID,
		&i.AttributeID,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeIds),
	)
	return i, err
}

const insertFusionMonster = `-- name: InsertFusionMonster :one
INSERT INTO fusion_monsters (card_id)
VALUES ($1)
RETURNING card_id, dataowner, regist_date, enable_start_date, enable_end_date, version
`

// InsertFusionMonster ...
func (q *Queries) InsertFusionMonster(ctx context.Context, cardID int64) (FusionMonster, error) {
	row := q.db.QueryRowContext(ctx, insertFusionMonster, cardID)
	var i FusionMonster
	err := row.Scan(
		&i.CardID,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertLinkMonster = `-- name: InsertLinkMonster :one
INSERT INTO link_monsters (card_id, link_marker)
VALUES ($1, $2)
RETURNING card_id, link_marker, dataowner, regist_date, enable_start_date, enable_end_date, version
`

type InsertLinkMonsterParams struct {
	CardID     int64         `db:"card_id" json:"cardId"`
	LinkMarker sql.NullInt32 `db:"link_marker" json:"linkMarker"`
}

// InsertLinkMonster ...
func (q *Queries) InsertLinkMonster(ctx context.Context, arg InsertLinkMonsterParams) (LinkMonster, error) {
	row := q.db.QueryRowContext(ctx, insertLinkMonster, arg.CardID, arg.LinkMarker)
	var i LinkMonster
	err := row.Scan(
		&i.CardID,
		&i.LinkMarker,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertMonster = `-- name: InsertMonster :one
INSERT INTO monsters (card_id, race_id, attribute_id, attack, defense, level, type_ids)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING card_id, race_id, attribute_id, attack, defense, level, type_ids, dataowner, regist_date, enable_start_date, enable_end_date, version
`

type InsertMonsterParams struct {
	CardID      int64         `db:"card_id" json:"cardId"`
	RaceID      sql.NullInt32 `db:"race_id" json:"raceId"`
	AttributeID sql.NullInt32 `db:"attribute_id" json:"attributeId"`
	Attack      sql.NullInt32 `db:"attack" json:"attack"`
	Defense     sql.NullInt32 `db:"defense" json:"defense"`
	Level       sql.NullInt32 `db:"level" json:"level"`
	TypeIds     []int32       `db:"type_ids" json:"typeIds"`
}

// InsertMonster ...
func (q *Queries) InsertMonster(ctx context.Context, arg InsertMonsterParams) (Monster, error) {
	row := q.db.QueryRowContext(ctx, insertMonster,
		arg.CardID,
		arg.RaceID,
		arg.AttributeID,
		arg.Attack,
		arg.Defense,
		arg.Level,
		pq.Array(arg.TypeIds),
	)
	var i Monster
	err := row.Scan(
		&i.CardID,
		&i.RaceID,
		&i.AttributeID,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeIds),
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertPendulumMonster = `-- name: InsertPendulumMonster :one
INSERT INTO pendulum_monsters (card_id, scale, pendulum_text_ja, pendulum_text_en)
VALUES ($1, $2, $3, $4)
RETURNING card_id, scale, pendulum_text_ja, pendulum_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
`

type InsertPendulumMonsterParams struct {
	CardID         int64          `db:"card_id" json:"cardId"`
	Scale          sql.NullInt32  `db:"scale" json:"scale"`
	PendulumTextJa sql.NullString `db:"pendulum_text_ja" json:"pendulumTextJa"`
	PendulumTextEn sql.NullString `db:"pendulum_text_en" json:"pendulumTextEn"`
}

// InsertPendulumMonster ...
func (q *Queries) InsertPendulumMonster(ctx context.Context, arg InsertPendulumMonsterParams) (PendulumMonster, error) {
	row := q.db.QueryRowContext(ctx, insertPendulumMonster,
		arg.CardID,
		arg.Scale,
		arg.PendulumTextJa,
		arg.PendulumTextEn,
	)
	var i PendulumMonster
	err := row.Scan(
		&i.CardID,
		&i.Scale,
		&i.PendulumTextJa,
		&i.PendulumTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertRitualMonster = `-- name: InsertRitualMonster :one
INSERT INTO ritual_monsters (card_id)
VALUES ($1)
RETURNING card_id, dataowner, regist_date, enable_start_date, enable_end_date, version
`

// InsertRitualMonster ...
func (q *Queries) InsertRitualMonster(ctx context.Context, cardID int64) (RitualMonster, error) {
	row := q.db.QueryRowContext(ctx, insertRitualMonster, cardID)
	var i RitualMonster
	err := row.Scan(
		&i.CardID,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertSynchroMonster = `-- name: InsertSynchroMonster :one
INSERT INTO synchro_monsters (card_id)
VALUES ($1)
RETURNING card_id, dataowner, regist_date, enable_start_date, enable_end_date, version
`

// InsertSynchroMonster ...
func (q *Queries) InsertSynchroMonster(ctx context.Context, cardID int64) (SynchroMonster, error) {
	row := q.db.QueryRowContext(ctx, insertSynchroMonster, cardID)
	var i SynchroMonster
	err := row.Scan(
		&i.CardID,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const insertXyzMonster = `-- name: InsertXyzMonster :one
INSERT INTO xyz_monsters (card_id)
VALUES ($1)
RETURNING card_id, dataowner, regist_date, enable_start_date, enable_end_date, version
`

// InsertXyzMonster ...
func (q *Queries) InsertXyzMonster(ctx context.Context, cardID int64) (XyzMonster, error) {
	row := q.db.QueryRowContext(ctx, insertXyzMonster, cardID)
	var i XyzMonster
	err := row.Scan(
		&i.CardID,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const selectFullFusionMonsterCardInfoByCardID = `-- name: SelectFullFusionMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
join
    fusion_monsters as fm on c.id = fm.card_id
`

type SelectFullFusionMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
}

// GetFusionMonsterCardByCardID ...
func (q *Queries) SelectFullFusionMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullFusionMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullFusionMonsterCardInfoByCardID, id)
	var i SelectFullFusionMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
	)
	return i, err
}

const selectFullLinkMonsterCardInfoByCardID = `-- name: SelectFullLinkMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en,
    lm.link_marker
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
join
    link_monsters as lm on c.id = lm.card_id
`

type SelectFullLinkMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
	LinkMarker      sql.NullInt32  `db:"link_marker" json:"linkMarker"`
}

// GetLinkMonsterCardByCardID ...
func (q *Queries) SelectFullLinkMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullLinkMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullLinkMonsterCardInfoByCardID, id)
	var i SelectFullLinkMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
		&i.LinkMarker,
	)
	return i, err
}

const selectFullMonsterCardInfoByCardID = `-- name: SelectFullMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
`

type SelectFullMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
}

// GetMonsterCardByCardID ...
func (q *Queries) SelectFullMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullMonsterCardInfoByCardID, id)
	var i SelectFullMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
	)
	return i, err
}

const selectFullMonsterCardInfoByNeuronID = `-- name: SelectFullMonsterCardInfoByNeuronID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        neuron_id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
`

type SelectFullMonsterCardInfoByNeuronIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
}

// GetMonsterCardByNeuronID ...
func (q *Queries) SelectFullMonsterCardInfoByNeuronID(ctx context.Context, neuronID sql.NullInt64) (SelectFullMonsterCardInfoByNeuronIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullMonsterCardInfoByNeuronID, neuronID)
	var i SelectFullMonsterCardInfoByNeuronIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
	)
	return i, err
}

const selectFullPendulumMonsterCardInfoByCardID = `-- name: SelectFullPendulumMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en,
    pm.scale,
    pm.pendulum_text_ja,
    pm.pendulum_text_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
join
    pendulum_monsters as pm on c.id = pm.card_id
`

type SelectFullPendulumMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
	Scale           sql.NullInt32  `db:"scale" json:"scale"`
	PendulumTextJa  sql.NullString `db:"pendulum_text_ja" json:"pendulumTextJa"`
	PendulumTextEn  sql.NullString `db:"pendulum_text_en" json:"pendulumTextEn"`
}

// GetPendulumMonsterCardByCardID ...
func (q *Queries) SelectFullPendulumMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullPendulumMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullPendulumMonsterCardInfoByCardID, id)
	var i SelectFullPendulumMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
		&i.Scale,
		&i.PendulumTextJa,
		&i.PendulumTextEn,
	)
	return i, err
}

const selectFullRitualMonsterCardInfoByCardID = `-- name: SelectFullRitualMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
join
    ritual_monsters as rm on c.id = rm.card_id
`

type SelectFullRitualMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
}

// GetRitualMonsterCardByCardID ...
func (q *Queries) SelectFullRitualMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullRitualMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullRitualMonsterCardInfoByCardID, id)
	var i SelectFullRitualMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
	)
	return i, err
}

const selectFullSynchroMonsterCardInfoByCardID = `-- name: SelectFullSynchroMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
join
    synchro_monsters as sm on c.id = sm.card_id
`

type SelectFullSynchroMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
}

// GetSynchroMonsterCardByCardID ...
func (q *Queries) SelectFullSynchroMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullSynchroMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullSynchroMonsterCardInfoByCardID, id)
	var i SelectFullSynchroMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
	)
	return i, err
}

const selectFullXyzMonsterCardInfoByCardID = `-- name: SelectFullXyzMonsterCardInfoByCardID :one
with target_card as (
    select
        id, neuron_id, ocg_api_id, name_ja, name_en, card_text_ja, card_text_en, dataowner, regist_date, enable_start_date, enable_end_date, version
    from
        cards
    where
        cards.id = $1
),
card_types as (
    select
        tt.id as card_id,
        array_agg(mt.name_ja)::varchar[] as type_names_ja,
        array_agg(mt.name_en)::varchar[] as type_names_en
    from
        target_card as tt
    join
    monsters as m on m.card_id = tt.id
    cross join lateral
        unnest(m.type_ids) as t(type_id)
    join
        monster_types as mt on t.type_id = mt.id
    group by
        tt.id
)
select
    c.id, c.neuron_id, c.ocg_api_id, c.name_ja, c.name_en, c.card_text_ja, c.card_text_en, c.dataowner, c.regist_date, c.enable_start_date, c.enable_end_date, c.version,
    m.attack,
    m.defense,
    m.level,
    ct.type_names_ja,
    ct.type_names_en,
    r.name_ja as race_name_ja,
    r.name_en as race_name_en,
    a.name_ja as attribute_name_ja,
    a.name_en as attribute_name_en
from
    target_card as c
join
    monsters as m on c.id = m.card_id
join
    races as r on m.race_id = r.id
join
    attributes as a on m.attribute_id = a.id
join
    card_types as ct on c.id = ct.card_id
join
    xyz_monsters as xm on c.id = xm.card_id
`

type SelectFullXyzMonsterCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	Attack          sql.NullInt32  `db:"attack" json:"attack"`
	Defense         sql.NullInt32  `db:"defense" json:"defense"`
	Level           sql.NullInt32  `db:"level" json:"level"`
	TypeNamesJa     []string       `db:"type_names_ja" json:"typeNamesJa"`
	TypeNamesEn     []string       `db:"type_names_en" json:"typeNamesEn"`
	RaceNameJa      sql.NullString `db:"race_name_ja" json:"raceNameJa"`
	RaceNameEn      sql.NullString `db:"race_name_en" json:"raceNameEn"`
	AttributeNameJa sql.NullString `db:"attribute_name_ja" json:"attributeNameJa"`
	AttributeNameEn sql.NullString `db:"attribute_name_en" json:"attributeNameEn"`
}

// GetXyzMonsterCardByCardID ...
func (q *Queries) SelectFullXyzMonsterCardInfoByCardID(ctx context.Context, id int64) (SelectFullXyzMonsterCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullXyzMonsterCardInfoByCardID, id)
	var i SelectFullXyzMonsterCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.Attack,
		&i.Defense,
		&i.Level,
		pq.Array(&i.TypeNamesJa),
		pq.Array(&i.TypeNamesEn),
		&i.RaceNameJa,
		&i.RaceNameEn,
		&i.AttributeNameJa,
		&i.AttributeNameEn,
	)
	return i, err
}
