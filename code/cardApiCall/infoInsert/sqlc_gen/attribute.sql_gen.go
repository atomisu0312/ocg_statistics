// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attribute.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const selectAttributesById = `-- name: SelectAttributesById :one
SELECT id, name_ja, name_en
FROM attributes
WHERE id = $1
`

type SelectAttributesByIdRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectAttributesById ...
func (q *Queries) SelectAttributesById(ctx context.Context, id int32) (SelectAttributesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectAttributesById, id)
	var i SelectAttributesByIdRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectAttributesByNameEn = `-- name: SelectAttributesByNameEn :one
SELECT id, name_ja, name_en
FROM attributes
WHERE name_en = $1
`

type SelectAttributesByNameEnRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectAttributesByNameEn ...
func (q *Queries) SelectAttributesByNameEn(ctx context.Context, nameEn sql.NullString) (SelectAttributesByNameEnRow, error) {
	row := q.db.QueryRowContext(ctx, selectAttributesByNameEn, nameEn)
	var i SelectAttributesByNameEnRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectAttributesByNameJa = `-- name: SelectAttributesByNameJa :one
SELECT id, name_ja, name_en
FROM attributes
WHERE name_ja = $1
`

type SelectAttributesByNameJaRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectAttributesByNameJa ...
func (q *Queries) SelectAttributesByNameJa(ctx context.Context, nameJa sql.NullString) (SelectAttributesByNameJaRow, error) {
	row := q.db.QueryRowContext(ctx, selectAttributesByNameJa, nameJa)
	var i SelectAttributesByNameJaRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}
