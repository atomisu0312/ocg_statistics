// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trap_types.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const selectTrapTypesById = `-- name: SelectTrapTypesById :one
SELECT id, name_ja, name_en
FROM trap_types
WHERE id = $1
`

type SelectTrapTypesByIdRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectTrapTypesById ...
func (q *Queries) SelectTrapTypesById(ctx context.Context, id int32) (SelectTrapTypesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectTrapTypesById, id)
	var i SelectTrapTypesByIdRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectTrapTypesByNameEn = `-- name: SelectTrapTypesByNameEn :one
SELECT id, name_ja, name_en
FROM trap_types
WHERE name_en = $1
`

type SelectTrapTypesByNameEnRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectTrapTypesByNameEn ...
func (q *Queries) SelectTrapTypesByNameEn(ctx context.Context, nameEn sql.NullString) (SelectTrapTypesByNameEnRow, error) {
	row := q.db.QueryRowContext(ctx, selectTrapTypesByNameEn, nameEn)
	var i SelectTrapTypesByNameEnRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectTrapTypesByNameJa = `-- name: SelectTrapTypesByNameJa :one
SELECT id, name_ja, name_en
FROM trap_types
WHERE name_ja = $1
`

type SelectTrapTypesByNameJaRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectTrapTypesByNameJa ...
func (q *Queries) SelectTrapTypesByNameJa(ctx context.Context, nameJa sql.NullString) (SelectTrapTypesByNameJaRow, error) {
	row := q.db.QueryRowContext(ctx, selectTrapTypesByNameJa, nameJa)
	var i SelectTrapTypesByNameJaRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}
