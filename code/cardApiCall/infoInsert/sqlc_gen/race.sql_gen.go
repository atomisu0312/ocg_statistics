// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: race.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const selectRacesById = `-- name: SelectRacesById :one
SELECT id, name_ja, name_en
FROM races
WHERE id = $1
`

type SelectRacesByIdRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectRacesById ...
func (q *Queries) SelectRacesById(ctx context.Context, id int32) (SelectRacesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectRacesById, id)
	var i SelectRacesByIdRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectRacesByNameEn = `-- name: SelectRacesByNameEn :one
SELECT id, name_ja, name_en
FROM races
WHERE name_en = $1
`

type SelectRacesByNameEnRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectRacesByNameEn ...
func (q *Queries) SelectRacesByNameEn(ctx context.Context, nameEn sql.NullString) (SelectRacesByNameEnRow, error) {
	row := q.db.QueryRowContext(ctx, selectRacesByNameEn, nameEn)
	var i SelectRacesByNameEnRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectRacesByNameJa = `-- name: SelectRacesByNameJa :one
SELECT id, name_ja, name_en
FROM races
WHERE name_ja = $1
`

type SelectRacesByNameJaRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectRacesByNameJa ...
func (q *Queries) SelectRacesByNameJa(ctx context.Context, nameJa sql.NullString) (SelectRacesByNameJaRow, error) {
	row := q.db.QueryRowContext(ctx, selectRacesByNameJa, nameJa)
	var i SelectRacesByNameJaRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}
