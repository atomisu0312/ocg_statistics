// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: spell_types.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const selectSpellTypesById = `-- name: SelectSpellTypesById :one
SELECT id, name_ja, name_en
FROM spell_types
WHERE id = $1
`

type SelectSpellTypesByIdRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectSpellTypesById ...
func (q *Queries) SelectSpellTypesById(ctx context.Context, id int32) (SelectSpellTypesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectSpellTypesById, id)
	var i SelectSpellTypesByIdRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectSpellTypesByNameEn = `-- name: SelectSpellTypesByNameEn :one
SELECT id, name_ja, name_en
FROM spell_types
WHERE name_en = $1
`

type SelectSpellTypesByNameEnRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectSpellTypesByNameEn ...
func (q *Queries) SelectSpellTypesByNameEn(ctx context.Context, nameEn sql.NullString) (SelectSpellTypesByNameEnRow, error) {
	row := q.db.QueryRowContext(ctx, selectSpellTypesByNameEn, nameEn)
	var i SelectSpellTypesByNameEnRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectSpellTypesByNameJa = `-- name: SelectSpellTypesByNameJa :one
SELECT id, name_ja, name_en
FROM spell_types
WHERE name_ja = $1
`

type SelectSpellTypesByNameJaRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectSpellTypesByNameJa ...
func (q *Queries) SelectSpellTypesByNameJa(ctx context.Context, nameJa sql.NullString) (SelectSpellTypesByNameJaRow, error) {
	row := q.db.QueryRowContext(ctx, selectSpellTypesByNameJa, nameJa)
	var i SelectSpellTypesByNameJaRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}
