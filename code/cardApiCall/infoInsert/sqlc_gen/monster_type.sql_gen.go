// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: monster_type.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const selectMonsterTypesById = `-- name: SelectMonsterTypesById :one
SELECT id, name_ja, name_en
FROM monster_types
WHERE id = $1
`

type SelectMonsterTypesByIdRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectMonsterTypesById ...
func (q *Queries) SelectMonsterTypesById(ctx context.Context, id int32) (SelectMonsterTypesByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectMonsterTypesById, id)
	var i SelectMonsterTypesByIdRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectMonsterTypesByNameEn = `-- name: SelectMonsterTypesByNameEn :one
SELECT id, name_ja, name_en
FROM monster_types
WHERE name_en = $1
`

type SelectMonsterTypesByNameEnRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectMonsterTypesByNameEn ...
func (q *Queries) SelectMonsterTypesByNameEn(ctx context.Context, nameEn sql.NullString) (SelectMonsterTypesByNameEnRow, error) {
	row := q.db.QueryRowContext(ctx, selectMonsterTypesByNameEn, nameEn)
	var i SelectMonsterTypesByNameEnRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}

const selectMonsterTypesByNameJa = `-- name: SelectMonsterTypesByNameJa :one
SELECT id, name_ja, name_en
FROM monster_types
WHERE name_ja = $1
`

type SelectMonsterTypesByNameJaRow struct {
	ID     int32          `db:"id" json:"id"`
	NameJa sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn sql.NullString `db:"name_en" json:"nameEn"`
}

// SelectMonsterTypesByNameJa ...
func (q *Queries) SelectMonsterTypesByNameJa(ctx context.Context, nameJa sql.NullString) (SelectMonsterTypesByNameJaRow, error) {
	row := q.db.QueryRowContext(ctx, selectMonsterTypesByNameJa, nameJa)
	var i SelectMonsterTypesByNameJaRow
	err := row.Scan(&i.ID, &i.NameJa, &i.NameEn)
	return i, err
}
