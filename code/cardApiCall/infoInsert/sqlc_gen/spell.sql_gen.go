// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: spell.sql

package sqlc_gen

import (
	"context"
	"database/sql"
)

const findSpellByCardID = `-- name: FindSpellByCardID :one
SELECT card_id, spell_type_id
FROM spells
WHERE card_id = $1
`

type FindSpellByCardIDRow struct {
	CardID      int64         `db:"card_id" json:"cardId"`
	SpellTypeID sql.NullInt32 `db:"spell_type_id" json:"spellTypeId"`
}

// FindSpellByCardID ...
func (q *Queries) FindSpellByCardID(ctx context.Context, cardID int64) (FindSpellByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, findSpellByCardID, cardID)
	var i FindSpellByCardIDRow
	err := row.Scan(&i.CardID, &i.SpellTypeID)
	return i, err
}

const insertSpell = `-- name: InsertSpell :one
INSERT INTO spells (card_id, spell_type_id)
VALUES ($1, $2)
RETURNING card_id, spell_type_id, dataowner, regist_date, enable_start_date, enable_end_date, version
`

type InsertSpellParams struct {
	CardID      int64         `db:"card_id" json:"cardId"`
	SpellTypeID sql.NullInt32 `db:"spell_type_id" json:"spellTypeId"`
}

// InsertSpell ...
func (q *Queries) InsertSpell(ctx context.Context, arg InsertSpellParams) (Spell, error) {
	row := q.db.QueryRowContext(ctx, insertSpell, arg.CardID, arg.SpellTypeID)
	var i Spell
	err := row.Scan(
		&i.CardID,
		&i.SpellTypeID,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
	)
	return i, err
}

const selectFullSpellCardInfoByCardID = `-- name: SelectFullSpellCardInfoByCardID :one
SELECT 
  cards.id, cards.neuron_id, cards.ocg_api_id, cards.name_ja, cards.name_en, cards.card_text_ja, cards.card_text_en, cards.dataowner, cards.regist_date, cards.enable_start_date, cards.enable_end_date, cards.version
  , spell_types.name_ja as spell_type_name_ja
  , spell_types.name_en as spell_type_name_en
  FROM cards
join spells on cards.id = spells.card_id
join spell_types on spells.spell_type_id = spell_types.id
WHERE cards.id = $1
`

type SelectFullSpellCardInfoByCardIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	SpellTypeNameJa sql.NullString `db:"spell_type_name_ja" json:"spellTypeNameJa"`
	SpellTypeNameEn sql.NullString `db:"spell_type_name_en" json:"spellTypeNameEn"`
}

// GetSpellCardByyOcgApiID ...
func (q *Queries) SelectFullSpellCardInfoByCardID(ctx context.Context, id int64) (SelectFullSpellCardInfoByCardIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullSpellCardInfoByCardID, id)
	var i SelectFullSpellCardInfoByCardIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.SpellTypeNameJa,
		&i.SpellTypeNameEn,
	)
	return i, err
}

const selectFullSpellCardInfoByNeuronID = `-- name: SelectFullSpellCardInfoByNeuronID :one
SELECT 
  cards.id, cards.neuron_id, cards.ocg_api_id, cards.name_ja, cards.name_en, cards.card_text_ja, cards.card_text_en, cards.dataowner, cards.regist_date, cards.enable_start_date, cards.enable_end_date, cards.version
  , spell_types.name_ja as spell_type_name_ja
  , spell_types.name_en as spell_type_name_en
  FROM cards
join spells on cards.id = spells.card_id
join spell_types on spells.spell_type_id = spell_types.id
WHERE cards.neuron_id = $1
`

type SelectFullSpellCardInfoByNeuronIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	SpellTypeNameJa sql.NullString `db:"spell_type_name_ja" json:"spellTypeNameJa"`
	SpellTypeNameEn sql.NullString `db:"spell_type_name_en" json:"spellTypeNameEn"`
}

// GetSpellCardByNeuronID ...
func (q *Queries) SelectFullSpellCardInfoByNeuronID(ctx context.Context, neuronID sql.NullInt64) (SelectFullSpellCardInfoByNeuronIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullSpellCardInfoByNeuronID, neuronID)
	var i SelectFullSpellCardInfoByNeuronIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.SpellTypeNameJa,
		&i.SpellTypeNameEn,
	)
	return i, err
}

const selectFullSpellCardInfoByOcgApiID = `-- name: SelectFullSpellCardInfoByOcgApiID :one
SELECT 
  cards.id, cards.neuron_id, cards.ocg_api_id, cards.name_ja, cards.name_en, cards.card_text_ja, cards.card_text_en, cards.dataowner, cards.regist_date, cards.enable_start_date, cards.enable_end_date, cards.version
  , spell_types.name_ja as spell_type_name_ja
  , spell_types.name_en as spell_type_name_en
  FROM cards
join spells on cards.id = spells.card_id
join spell_types on spells.spell_type_id = spell_types.id
WHERE cards.ocg_api_id = $1
`

type SelectFullSpellCardInfoByOcgApiIDRow struct {
	ID              int64          `db:"id" json:"id"`
	NeuronID        sql.NullInt64  `db:"neuron_id" json:"neuronId"`
	OcgApiID        sql.NullInt64  `db:"ocg_api_id" json:"ocgApiId"`
	NameJa          sql.NullString `db:"name_ja" json:"nameJa"`
	NameEn          sql.NullString `db:"name_en" json:"nameEn"`
	CardTextJa      sql.NullString `db:"card_text_ja" json:"cardTextJa"`
	CardTextEn      sql.NullString `db:"card_text_en" json:"cardTextEn"`
	Dataowner       sql.NullString `db:"dataowner" json:"dataowner"`
	RegistDate      sql.NullTime   `db:"regist_date" json:"registDate"`
	EnableStartDate sql.NullTime   `db:"enable_start_date" json:"enableStartDate"`
	EnableEndDate   sql.NullTime   `db:"enable_end_date" json:"enableEndDate"`
	Version         sql.NullInt64  `db:"version" json:"version"`
	SpellTypeNameJa sql.NullString `db:"spell_type_name_ja" json:"spellTypeNameJa"`
	SpellTypeNameEn sql.NullString `db:"spell_type_name_en" json:"spellTypeNameEn"`
}

// GetSpellCardByyOcgApiID ...
func (q *Queries) SelectFullSpellCardInfoByOcgApiID(ctx context.Context, ocgApiID sql.NullInt64) (SelectFullSpellCardInfoByOcgApiIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectFullSpellCardInfoByOcgApiID, ocgApiID)
	var i SelectFullSpellCardInfoByOcgApiIDRow
	err := row.Scan(
		&i.ID,
		&i.NeuronID,
		&i.OcgApiID,
		&i.NameJa,
		&i.NameEn,
		&i.CardTextJa,
		&i.CardTextEn,
		&i.Dataowner,
		&i.RegistDate,
		&i.EnableStartDate,
		&i.EnableEndDate,
		&i.Version,
		&i.SpellTypeNameJa,
		&i.SpellTypeNameEn,
	)
	return i, err
}
