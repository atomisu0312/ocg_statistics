name: OCG Card API Docker CI (for ID Check)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'code/cardApiCall/infoInsert/**'
  workflow_dispatch:

env:  
  AWS_REGION: ap-northeast-1
  # ECRリポジトリ名とLambda関数名をSecretsから読み込む
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME_CARDINSERT }}
  LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME_CARDINSERT }}
  IMAGE_WORKDIR: ./code/cardApiCall/infoInsert

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.push.outputs.image_uri }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Save timestamp
      id: time
      run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: push
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_NAME: ${{ env.ECR_REPOSITORY }}
        TIMESTAMP: ${{ steps.time.outputs.timestamp }}
      run: |
        IMAGE_URI_TIMESTAMP="$ECR_REGISTRY/$IMAGE_NAME:$TIMESTAMP"
        IMAGE_URI_LATEST="$ECR_REGISTRY/$IMAGE_NAME:latest"
        docker build -t "$IMAGE_URI_TIMESTAMP" -t "$IMAGE_URI_LATEST" -f ${{ env.IMAGE_WORKDIR }}/Dockerfile ${{ env.IMAGE_WORKDIR }}
        docker push "$IMAGE_URI_TIMESTAMP"
        docker push "$IMAGE_URI_LATEST"
        echo "image_uri=$IMAGE_URI_TIMESTAMP" >> $GITHUB_OUTPUT

  deploy-to-lambda:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Install AWS CLI
      run: |
        if command -v aws &> /dev/null; then
          echo "AWS CLI is already installed. Updating..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
        else
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi
    - name: Update Lambda function
      env:
        AWS_PAGER: ""
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        IMAGE_NAME: ${{ env.ECR_REPOSITORY }}
      run: |
        aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --image-uri $ECR_REGISTRY/$IMAGE_NAME:latest